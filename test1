


// export{default} from 'next-auth/middleware'
// export const config = {
//   matcher: [ "/dashboard/:path*"],
// };
///////////////////////////////////////////////////////////////////////
// import { withAuth } from 'next-auth/middleware'

// export default withAuth({
//   callbacks: {
//     async authorized(req, token) {
//         console.log(req)
//         console.log(token)
//       // If the user is not authenticated, redirect them to the sign-in page.
//       if (!token) {
//         return '/login'
//       }
//       // If the user is authenticated, allow them to access the page.
//       return true
//     }
//   }
// })
///////////////////////////////////////////////////////////////////////
// import { NextApiRequest, NextApiResponse } from "next"
// import { getSession } from "next-auth/react"
// // import { getSession } from "next-auth/client"

// export default async function authMiddleware(req, res) {

// //   const session = await getSession({ req, token })

// //   if (!session) {
// //     res.writeHead(302, {
// //       Location: "/api/auth/signin",
// //     })
// //     res.end()
// //   }
// }


///////////////////////////////////////////////////////////////////////
// import { NextResponse } from "next/server";
// export const config = {
//   matcher: [ "/dashboard", "/dashboard/:path*"],
// };
// export default async function middleware(request) {
//   const session_token = request.cookies.get("next-auth.session-token")?.value;
//     if (!session_token) {
//      return NextResponse.redirect(new URL("/login", request.url));
//   }
 
// }
//////////////////////////////////////////////////////////////////////////////
// import { withAuth } from "next-auth/middleware"
// export default withAuth(
//   function middleware (req,res) {
//     console.log("res")
//     console.log(res)
//     NextResponse.redirect(new URL("/dashboard", req.url))
//     console.log("NextResponse")

//   }
// ,
//   {
//     callbacks: {
//       authorized: async ({ req, token }) => {
//         var tokenn = token
//         console.log(tokenn)
//         const pathname = req.nextUrl.pathname;
//         if (pathname.startsWith('/login') && token)
//         console.log("pathname.startsWith('/login') && token")
//           if (pathname.startsWith('/login') && !token)
//             console.log("token is not defined")
//         if (token) return true;
//         return false;
//       },
//     },
//   });
////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////




// import { NextResponse } from "next/server";
// export const config = {
//   matcher: ["/login", "/dashboard", "/dashboard/:path*"],
// };
// export async function middleware(request) {
//   // console.log("request")
//   // console.log(token)

//   const session_token = request.cookies.get("next-auth.session-token")?.value;
//   // const encripted_session_token = request.cookies.get("auth")?.value;
//   // const session_token = decrypt (`${encripted_session_token}`)
//   if (request.nextUrl.pathname === "/login") {
//     if (session_token) {
//       return NextResponse.redirect(new URL("/dashboard", request.url));
//     }
//   } else if (!session_token) {
//     return NextResponse.redirect(new URL("/login", request.url));
//   }
// }
////////////////////////////////////////////////////////////////////////////
// import { withAuth } from "next-auth/middleware"
// export default withAuth(
//   function middleware (req) {
//   },
//   {
//     callbacks: {
//       authorized: ({ req, token }) => {
//         console.log(token)
//         if (
//           req.nextUrl.pathname.startsWith('/protected') &&
//           token === null
//         ) {
//           return false
//         }
//         return true
//       }
//     }
//   }
// )
/////////////////////////////////////////////////////////////////////////////
// import { withAuth } from "next-auth/middleware"
// import { NextResponse } from "next/server";
// import { res } from 'next';
// export default withAuth(
//         function middleware (req,res) {

//          },
//   {
//   callbacks: {
//     authorized: async ({ req, token }) => {
//       var tokenn = token
//       console.log(tokenn)
//       const pathname = req.nextUrl.pathname;


//       if (pathname.startsWith('/login') && token )

//         // console.log("pathname.startsWith('/login') && token" )
//         // console.log("NextResponse.redirect(new URL(/dashboard, req.url))" )
//         // NextResponse.redirect(new URL("/dashboard", req.url));
//         // console.log(token)

//       if (pathname.startsWith('/login') && !token )
       
//         console.log("token is not defined")
//         return true;

//       if (token) return true;

//       return false;
//     },
//   },
//   // pages: {
//   //   signIn: '/dashboard',
//   //   signOut: '/login',
//   // },
// });
////////////////////////////////////////////////////////////////////////////
// import { withAuth } from "next-auth/middleware";
// import { NextResponse } from "next/server";

// export default withAuth(
//   function middleware(req) {
//     //return NextResponse
//     // return NextResponse.rewrite(new URL("/dashboard", req.url));
//   },
//   {
//     callbacks: {
//       authorized: ({ token }) => console.log(token),
//     },

//   }
// );

// export const config = { matcher: ["/dashboard"] };
///////////////////////////////////////////////////////////
// import { NextFetchEvent, NextRequest, NextResponse } from 'next/server';
// import { withAuth } from 'next-auth/middleware';

// export default async function middleware(event) {
//  const { request, response } = event;

//  // Access the session data
//  const session = request.session;

//  // Your middleware logic here
// }

// Wrap your middleware with the `withAuth` function to handle authentication

////////////////////////////////////////////////////////////////
// import { withAuth } from 'next-auth/middleware';

// const handler = async (req, res) => {
//  res.status(200).json({ message: 'Hello from protected API route!' });
// };

// export default withAuth({
//  callbacks: {
//     async authorized({ req, token }) {
//       // Additional logic goes here
//       console.log(token);
//       return !!token;
//     },
//  },
// })
//  withAuth;
// export const config = {
//   matcher: ['/login', '/dashboard', '/dashboard/:path*'],
//  };
////////////////////////////////////////////////////////////////////////
// import { NextFetchEvent, NextRequest, NextResponse } from 'next/server';
// import { withAuth } from 'next-auth/middleware';

// export default async function middleware(event) {
// //  const { request, response } = event;

//  // Access the session data
// //  const session = request.session;
// console.log(event)
//  // Your middleware logic here
// }

// // Wrap your middleware with the `withAuth` function to handle authentication
// export const withMiddleware = withAuth({
//  callbacks: {
//     async authorized({ req, token }) {
//       console.log(token);
//       return !!token;
//     },
//  },
// });

// export const config = {
//  matcher: ['/login', '/dashboard', '/dashboard/:path*'],
// };
/////////////////////////////////////////////////////////////////////////


